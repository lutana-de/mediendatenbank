package mediendatenbank.gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;
import javax.swing.DefaultCellEditor;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JScrollBar;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import mediendatenbank.BibDatabase;
import mediendatenbank.BibEntry;
import mediendatenbank.BibUserException;

public class BibGUI2 extends javax.swing.JFrame implements ListSelectionListener {

	public BibGUI2() throws BibUserException {
		initComponents();
		// Load default settings
		this.setFontSize(BibDatabase.get().getSettingAsInt("font-size", 11));
		this.setMediaType(BibDatabase.Type.AUDIO);
		this.updateUI();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT
	 * modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fontSizeGroup = new javax.swing.ButtonGroup();
        dataTypeGroup = new javax.swing.ButtonGroup();
        editCellField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        queryLbl = new javax.swing.JLabel();
        queryTxt = new javax.swing.JTextField();
        dotdotdotLbl = new javax.swing.JLabel();
        btnPanel = new javax.swing.JPanel();
        newBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        aboutItem = new javax.swing.JMenuItem();
        settingsMenu = new javax.swing.JMenu();
        fontSizeMenu = new javax.swing.JMenu();
        backupLocationMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        quitItem = new javax.swing.JMenuItem();
        dataMenu = new javax.swing.JMenu();
        audioItem = new javax.swing.JRadioButtonMenuItem();
        videoItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        readOnlyItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        exportDataItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        editCellField.setBackground(Color.getHSBColor(50, 25, 100));
        editCellField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mediendatenbank");
        setExtendedState(Frame.MAXIMIZED_BOTH);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        dataTable.setAutoCreateRowSorter(true);
        BibTableModel model = new BibTableModel(this);
        model.addTableModelListener(new BibTableChangeListener());
        dataTable.setModel(model);
        dataTable.getTableHeader().setReorderingAllowed(false);
        dataTable.getSelectionModel().addListSelectionListener(this);

        DefaultCellEditor dce = new DefaultCellEditor(editCellField);
        TableColumnModel colModel = dataTable.getColumnModel();
        dataTable.removeColumn(colModel.getColumn(BibTableModel.ID_COL));
        for(int i = 0; i < colModel.getColumnCount(); i++) {
            TableColumn column = colModel.getColumn(i);
            column.setCellEditor(dce);
            column.setPreferredWidth(model.getColumnPreferredWidth(i));
            column.setMaxWidth(model.getColumnMaxWidth(i));
            column.setMinWidth(model.getColumnMinWidth(i));
        }
        jScrollPane1.setViewportView(dataTable);

        queryLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mediendatenbank/resources/search.png"))); // NOI18N
        queryLbl.setText("Suchen nach:");

        queryTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                queryTxtKeyReleased(evt);
            }
        });

        dotdotdotLbl.setText("...");

        btnPanel.setLayout(new java.awt.GridLayout(1, 0, 6, 0));

        newBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mediendatenbank/resources/db_add.png"))); // NOI18N
        newBtn.setText("Neuer Eintrag");
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });
        btnPanel.add(newBtn);

        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mediendatenbank/resources/db_remove.png"))); // NOI18N
        deleteBtn.setText("Markiere Einträge löschen");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        btnPanel.add(deleteBtn);

        fileMenu.setText("Programm");

        aboutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        aboutItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mediendatenbank/resources/info.png"))); // NOI18N
        aboutItem.setText("Informationen");
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItemActionPerformed(evt);
            }
        });
        fileMenu.add(aboutItem);

        settingsMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mediendatenbank/resources/settings.png"))); // NOI18N
        settingsMenu.setText("Einstellungen");

        fontSizeMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mediendatenbank/resources/font.png"))); // NOI18N
        fontSizeMenu.setText("Schriftgröße");

        Integer fontSize = BibDatabase.get().getSettingAsInt("font-size", 11);
        for(Integer i : fontSizes) {
            fontSizeMenu.add(this.createFontSizeSubItem(i, fontSize == i));
        }

        settingsMenu.add(fontSizeMenu);

        backupLocationMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mediendatenbank/resources/db_save.png"))); // NOI18N
        backupLocationMenu.setText("Verzeichnis für automatische Sicherungen");
        backupLocationMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupLocationMenuActionPerformed(evt);
            }
        });
        settingsMenu.add(backupLocationMenu);

        fileMenu.add(settingsMenu);
        fileMenu.add(jSeparator1);

        quitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        quitItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mediendatenbank/resources/exit.png"))); // NOI18N
        quitItem.setText("Beenden");
        quitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitItem);

        menuBar.add(fileMenu);

        dataMenu.setText("Daten");

        audioItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        dataTypeGroup.add(audioItem);
        audioItem.setText("Audio");
        audioItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mediendatenbank/resources/audio.png"))); // NOI18N
        audioItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioItemActionPerformed(evt);
            }
        });
        dataMenu.add(audioItem);

        videoItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        dataTypeGroup.add(videoItem);
        videoItem.setText("Video");
        videoItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mediendatenbank/resources/video.png"))); // NOI18N
        videoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoItemActionPerformed(evt);
            }
        });
        dataMenu.add(videoItem);
        dataMenu.add(jSeparator2);

        readOnlyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        readOnlyItem.setSelected(true);
        readOnlyItem.setText("Schreibschutz");
        readOnlyItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mediendatenbank/resources/lock.png"))); // NOI18N
        readOnlyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readOnlyItemActionPerformed(evt);
            }
        });
        dataMenu.add(readOnlyItem);
        dataMenu.add(jSeparator4);

        exportDataItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mediendatenbank/resources/db_save.png"))); // NOI18N
        exportDataItem.setText("Sicherung");
        exportDataItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportDataItemActionPerformed(evt);
            }
        });
        dataMenu.add(exportDataItem);

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mediendatenbank/resources/stats.png"))); // NOI18N
        jMenuItem1.setText("Statistiken");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        dataMenu.add(jMenuItem1);

        menuBar.add(dataMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(queryLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(queryTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dotdotdotLbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(queryLbl)
                    .addComponent(queryTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dotdotdotLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void audioItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioItemActionPerformed
		this.setMediaType(BibDatabase.Type.AUDIO);
    }//GEN-LAST:event_audioItemActionPerformed

    private void quitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitItemActionPerformed
		this.quit();
    }//GEN-LAST:event_quitItemActionPerformed

    private void aboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutItemActionPerformed
		BibAboutDlg dlg = new BibAboutDlg(this);
		dlg.setVisible(true);
    }//GEN-LAST:event_aboutItemActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
		this.quit();
    }//GEN-LAST:event_formWindowClosed

    private void exportDataItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportDataItemActionPerformed
		this.doExport();
    }//GEN-LAST:event_exportDataItemActionPerformed

    private void readOnlyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readOnlyItemActionPerformed
        this.updateUI();
    }//GEN-LAST:event_readOnlyItemActionPerformed

    private void videoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_videoItemActionPerformed
        this.setMediaType(BibDatabase.Type.VIDEO);
    }//GEN-LAST:event_videoItemActionPerformed

    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
		boolean newDlg = true;
		while (newDlg) {
			BibNewDlg dlg = new BibNewDlg(this);
			dlg.setVisible(true);
			newDlg = dlg.isNewDlgRequested();
			dlg.dispose();
		}
    }//GEN-LAST:event_newBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        this.delete();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void queryTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_queryTxtKeyReleased
        this.reloadData();
    }//GEN-LAST:event_queryTxtKeyReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        BibStatisticsDlg dlg = new BibStatisticsDlg(this);
        dlg.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void backupLocationMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupLocationMenuActionPerformed
		this.requestAutoBackupLocation();
    }//GEN-LAST:event_backupLocationMenuActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.createAutoBackup();
    }//GEN-LAST:event_formWindowOpened

	private void requestAutoBackupLocation() {
		String setting = "auto-backup-dir";
		String currentFolder = BibDatabase.get().getSetting(setting);
		JFileChooser folderDlg = new JFileChooser(currentFolder);
		folderDlg.setDialogTitle("Wähle Ordner zum Speichern automatischer Sicherungen");
		folderDlg.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int returnVal = folderDlg.showDialog(this, "Wählen");
		if(returnVal == JFileChooser.APPROVE_OPTION) {
			File newFolder = folderDlg.getSelectedFile();
			BibDatabase.get().updateSetting(setting, newFolder.getAbsolutePath());
		}
	}
	
	private void createAutoBackup() {
		String folder = BibDatabase.get().getSetting("auto-backup-dir");
		if (folder == null || folder.isEmpty()) {
			JOptionPane.showMessageDialog(this, "Verzeichnis für automatische Sicherungen ist nicht gesetzt. Bitte in den Einstellungen festlegen.", "Hinweis auf automatische Sicherungen", JOptionPane.INFORMATION_MESSAGE);
			this.requestAutoBackupLocation();
			folder = BibDatabase.get().getSetting("auto-backup-dir");
		}
		try {
			BibDatabase.get().export(new File(folder, this.getExportFilename("AutoBackup")));
			this.deleteOldAutoBackups();
		} catch (BibUserException ex) {
			JOptionPane.showMessageDialog(this, "Automatische Sicherung konnte nicht erstellt werden. Verzeichnis in den Einstellungen prüfen.", "Es ist ein Fehler aufgetreten...", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	private void deleteOldAutoBackups() {
		String path = BibDatabase.get().getSetting("auto-backup-dir");
		if (path == null || path.isEmpty()) {
			return;
		}
		File folder = new File(path);
		if (!folder.exists()) {
			return;
		}
		
		File[] files = folder.listFiles();
		SortedSet<File> sortedFiles = new TreeSet<File>(new Comparator<File>() {
			@Override
			public int compare(File f1, File f2) {
				return f1.getName().compareTo(f2.getName());
			}
		});
		for(File file : files) {
			String name = file.getName();
			if (name.startsWith("AutoBackup_") && name.endsWith(".dbzip")) {
				sortedFiles.add(file);
			}
		}
		
		// Keep the last 10 backups, remove all other.
		while(sortedFiles.size() > 10) {
			File oldestFile = sortedFiles.first();
			oldestFile.delete();
			sortedFiles.remove(oldestFile);
		}
	}

	@Override
	public void valueChanged(ListSelectionEvent e) {
		this.updateUI();
	}
    
	private void updateUI() {
		if (!this.readOnlyItem.isSelected() && this.dataTable.getSelectedRowCount() > 0 && this.dataTable.getRowSelectionAllowed()) {
			this.deleteBtn.setEnabled(true);
		} else {
			this.deleteBtn.setEnabled(false);
		}

		videoItem.setSelected(this.mediaType == BibDatabase.Type.VIDEO);
		audioItem.setSelected(this.mediaType != BibDatabase.Type.VIDEO);
	}
	
	private JRadioButtonMenuItem createFontSizeSubItem(Integer value, boolean selected) {
		JRadioButtonMenuItem item = new JRadioButtonMenuItem();
		item.setText(value.toString());
		item.setSelected(selected);
		Font font = BibFont.getMenu().deriveFont((float) value);
		item.setFont(font);
		item.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				JRadioButtonMenuItem item = (JRadioButtonMenuItem) evt.getSource();
				if (item != null) {
					BibGUI2.this.setFontSize(Integer.parseInt(item.getText()));
				}
			}
		});
		fontSizeGroup.add(item);
		return item;
	}

	private void setFontSize(Integer size) {
		BibDatabase.get().updateSetting("font-size", size.toString());
		BibFont.setSize(size);

		this.updateFontSizes(this, BibFont.getRegular());
		this.updateFontSizes(menuBar, BibFont.getMenu());
		this.updateFontSizes(this.editCellField, BibFont.getRegular());
		this.dataTable.setRowHeight((int) Math.round(size * 1.5));
		this.setScrollbarWidth(3 * size);
		this.invalidate();
		this.repaint();
	}

	private void setScrollbarWidth(int width) {
		JScrollBar sb = this.jScrollPane1.getVerticalScrollBar();
		if (sb != null) {
			sb.setPreferredSize(new Dimension(width, Integer.MAX_VALUE));
		}
	}

	private void updateFontSizes(Component c, Font font) {
		c.setFont(font);
		if (c instanceof Container) {
			this.updateFontSizes(((Container) c).getComponents(), font);
		}
		if (c instanceof JMenu && c != fontSizeMenu) {
			this.updateFontSizes(((JMenu) c).getMenuComponents(), font);
		}
	}

	private void updateFontSizes(Component[] components, Font font) {
		for (Component subComponent : components) {
			this.updateFontSizes(subComponent, font);
		}
	}
	
	public boolean isReadOnly() {
		return readOnlyItem.isSelected();
	}
	
	private void delete() {
		if (this.isReadOnly()) {
			JOptionPane.showMessageDialog(this, "Um einen Eintrag zu löschen muss der Schreibschutz aufheben werden.");
			return;
		}
		
		int count = this.dataTable.getSelectedRowCount();
		if (count == 0) {
			JOptionPane.showMessageDialog(this, "Bitte den zu löschenden Eintrag in der Tabelle auswählen.");
			return;
		}
		
		BibDeleteDlg dlg = new BibDeleteDlg(this, count);
		dlg.setVisible(true);
		if (dlg.isDeleteAccepted()) {
			int[] rows = this.dataTable.getSelectedRows();
			for (int i = 0; i < rows.length; i++) {
				Integer id = (Integer) this.dataTable.getModel().getValueAt(rows[i], BibTableModel.ID_COL);
				BibDatabase.get().deleteEntry(id);
			}
			this.reloadData();
		}
		dlg.dispose();
	}
	
	public void reloadData() {
		this.reloadData(null);
	}
	
	public void reloadData(Integer id) {
		String query = this.queryTxt.getText();

		DefaultTableModel model = (DefaultTableModel) this.dataTable.getModel();
		model.setRowCount(0);
		List<BibEntry> list = BibDatabase.get().readData(this.mediaType, query);
		Iterator<BibEntry> it = list.iterator();
		while (it.hasNext() == true) {
			BibEntry entry = (BibEntry) it.next();
			model.addRow(entry.getVector());
		}
	}

	public void quit() {
		BibDatabase.get().shutdown();
		System.exit(0);
	}
	
	private String getExportFilename() {
		return this.getExportFilename("Backup");
	}

	private String getExportFilename(String prefix) {
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
		return prefix + "_" + sdf.format(cal.getTime()) + ".dbzip";
	}

	private void doExport() {
		String dir = BibDatabase.get().getSetting("last-backup-dir");
		if (dir == null) {
			dir = "./";
		}
		File exists = new File(dir);
		if (!exists.exists()) {
			dir = "./";
		}
		File target = new File(dir + File.separator + getExportFilename());
		JFileChooser fc = new JFileChooser(dir);
		fc.setFileFilter(new FileNameExtensionFilter("Sicherungen (*.dbzip)", "dbzip"));
		fc.setDialogTitle("Datensicherung speichern");
		fc.setSelectedFile(target);
		int returnVal = fc.showSaveDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			target = fc.getSelectedFile();
			BibDatabase.get().updateSetting("last-backup-dir", target.getParentFile().getAbsolutePath());
			try {
				BibDatabase.get().export(target.getAbsolutePath());
				if (target.exists()) {
					JOptionPane.showMessageDialog(this, "Die Datensicherung wurde erfolgreich gespeichert.", "Aktion erfolgreich durchgeführt.", JOptionPane.INFORMATION_MESSAGE);
				} else {
					JOptionPane.showMessageDialog(this, "Sicherung konnte nicht erstellt werden.", "Es ist ein Fehler aufgetreten...", JOptionPane.ERROR_MESSAGE);
				}
			} catch (BibUserException ex) {
				JOptionPane.showMessageDialog(this, "Sicherung konnte nicht erstellt werden. Bitte Programm neu starten.", "Es ist ein Fehler aufgetreten...", JOptionPane.ERROR_MESSAGE);
			}
		}
	}
	

	public BibDatabase.Type getMediaType() {
		return mediaType;
	}

	private void setMediaType(BibDatabase.Type mediaType) {
		this.mediaType = mediaType;
		this.reloadData();
	}

	private BibDatabase.Type mediaType;
	private final Integer[] fontSizes = new Integer[]{8, 9, 10, 11, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40};
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JRadioButtonMenuItem audioItem;
    private javax.swing.JMenuItem backupLocationMenu;
    private javax.swing.JPanel btnPanel;
    private javax.swing.JMenu dataMenu;
    private javax.swing.JTable dataTable;
    private javax.swing.ButtonGroup dataTypeGroup;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel dotdotdotLbl;
    private javax.swing.JTextField editCellField;
    private javax.swing.JMenuItem exportDataItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.ButtonGroup fontSizeGroup;
    private javax.swing.JMenu fontSizeMenu;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton newBtn;
    private javax.swing.JLabel queryLbl;
    private javax.swing.JTextField queryTxt;
    private javax.swing.JMenuItem quitItem;
    private javax.swing.JCheckBoxMenuItem readOnlyItem;
    private javax.swing.JMenu settingsMenu;
    private javax.swing.JRadioButtonMenuItem videoItem;
    // End of variables declaration//GEN-END:variables

}
